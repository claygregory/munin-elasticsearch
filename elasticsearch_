#!/usr/bin/env ruby

require 'rubygems'
require 'net/http'
require 'json'

 #%# family=auto
 #%# capabilities=autoconf suggest

@host = ENV.member?('host') ? ENV['host']: "localhost"
@node = ENV.member?('node') ? ENV['node']: "_local"
@port = ENV.member?('port') ? ENV['port']: 9200
@user = ENV.member?('user') ? ENV['user']: ""
@pass = ENV.member?('pass') ? ENV['pass']: ""

def fetch(resource)
    uri = URI("http://" + @host + ":" + @port.to_s + resource)
    req = Net::HTTP::Get.new(uri)
    unless @user.empty?
        req.basic_auth @user, @pass
    end
    response = Net::HTTP.start(uri.hostname, uri.port) {|http|
        http.request(req)
    }
    return JSON.parse(response.body)
end

err = IO.new(2, "w")

mode = $0.gsub /.*\/elasticsearch_/, ""

if ARGV[0] == "autoconf"
    begin
        node_encode = URI.encode_www_form_component(@node)
        nodes_d = fetch('/_nodes/'+node_encode);
        puts "yes"
        exit 0
    rescue
        puts "no"
        exit 0
    end
end


if ARGV[0] == "suggest"
    puts "jvm"
    puts "gc"
    puts "gc_time"
    puts "cache"
    puts "docs"
    puts "ops"
    puts "store"
    exit 0
end

if ARGV[0] == "config"
    case mode
        when "jvm"
            puts "graph_title elasticsearch JVM heap"
            puts "graph_category elasticsearch"
            puts "graph_args --base 1024 -l 0"
            puts "graph_vlabel Bytes"
            
            puts "graph_order used committed"
            puts "used.label used bytes";
            puts "used.draw AREA";
            puts "committed.label committed bytes";
            puts "committed.draw LINE2";
            
        when "gc"
            puts "graph_title elasticsearch GC collection count"
            puts "graph_category elasticsearch"
            puts "graph_args --base 1000 -l 0"
            puts "graph_vlabel Collections per second"
            
            puts "graph_order count"
            puts "count.label GC count";
            puts "count.type DERIVE";
            puts "count.min 0";
            puts "count.draw LINE2";

        when "gc_time"
            puts "graph_title elasticsearch GC collection time"
            puts "graph_category elasticsearch"
            puts "graph_args --base 1000 -l 0"
            puts "graph_vlabel Running time (ms)"
            
            puts "graph_order time"
            puts "time.label Running time (ms)";
            puts "time.type DERIVE";
            puts "time.min 0";
            puts "time.draw LINE2";
            
        when "cache"
            puts "graph_title elasticsearch cache"
            puts "graph_category elasticsearch"
            puts "graph_args --base 1024 -l 0"
            puts "graph_vlabel Bytes"
            
            puts "graph_order field filter"
            puts "field.label field cache";
            puts "field.draw LINE2";
            puts "filter.label query cache";
            puts "filter.draw LINE2";
            
        when "docs"
            puts "graph_title elasticsearch docs"
            puts "graph_category elasticsearch"
            puts "graph_args --base 1000 -l 0"
            puts "graph_vlabel Documents"
            
            puts "graph_order count"
            puts "count.label document count";
            puts "count.draw LINE2";
            
        when "ops"
            puts "graph_title elasticsearch index operations"
            puts "graph_category elasticsearch"
            puts "graph_args --base 1000 -l 0"
            puts "graph_vlabel Operations per second"
            
            puts "graph_order index get search delete"
            puts "index.label index";
            puts "index.type DERIVE";
            puts "index.min 0";
            puts "index.draw LINE2";
        
            puts "get.label get";
            puts "get.type DERIVE";
            puts "get.min 0";
            puts "get.draw LINE2";
            
            puts "search.label search";
            puts "search.type DERIVE";
            puts "search.min 0";
            puts "search.draw LINE2";
            
            puts "delete.label delete";
            puts "delete.type DERIVE";
            puts "delete.min 0";
            puts "delete.draw LINE2";
            
        when "store"
            puts "graph_title elasticsearch store"
            puts "graph_category elasticsearch"
            puts "graph_args --base 1024 -l 0"
            puts "graph_vlabel Bytes"
            
            puts "graph_order size"
            puts "size.label store size";
            puts "size.draw LINE2";
    end
    exit 0
end

data = {};

begin
    node_encode = URI.encode_www_form_component(@node)
    stats = fetch('/_nodes/'+node_encode+'/stats');
rescue
    err.puts "Fetch error"
    exit 1
end

node_stats = stats['nodes'].values.first
if node_stats.nil?
    err.puts "No node found"
    exit 1
end

data['jvm'] = {
    "used" => node_stats['jvm']['mem']['heap_used_in_bytes'],
    "committed" => node_stats['jvm']['mem']['heap_committed_in_bytes']
}

data['gc'] = {
    "count" => node_stats['jvm']['gc']['collectors'].inject(0) {|sum, collector| sum += collector.last['collection_count']}
}

data['gc_time'] = {
    "time" => node_stats['jvm']['gc']['collectors'].inject(0) {|sum, collector| sum += collector.last['collection_time_in_millis']}
}

data['cache'] = {
    "field" => node_stats['indices']['fielddata']['memory_size_in_bytes'],
    "filter" => node_stats['indices']['query_cache']['memory_size_in_bytes']
}

data['docs'] = {
    "count" => node_stats['indices']['docs']['count']
}

data['ops'] = {
    "index" => node_stats['indices']['indexing']['index_total'],
    "get" => node_stats['indices']['get']['total'],
    "search" => node_stats['indices']['search']['query_total'],
    "delete" => node_stats['indices']['indexing']['delete_total']
}

data['store'] = {
    "size" => node_stats['indices']['store']['size_in_bytes']
}

# print result
data[mode].each do |k, v|
    printf "#{k}.value %s\n", v
end
